데이터베이스의 상태를 변경시키는 작업이며 트랜잭션 작업이 끝나면 Commit 또는 Rollback 되어야한다.
선언적 Transcation 설정 방법
크게 2가지 방식으로 사용되는데, 최근에는 간편하게 어노테이션 기반으로 많이 사용한다.
1.XML 파일을 이용한 설정(정확히말하면 <tx:advice> 태그를 이용한)(캠페인)
 1.1)tx 네임스페이스를 추가 후 다음과 같은 형태로 작성.
      xmlns:tx="http://www.springframework.org/schema/tx"
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
 1.2) transcation으로 관리할 jdbc 프로퍼티를 선언 해준뒤 트랜잭션매니저로 쓰일 id값을 설정해준다.
      <!-- quadmax transaction -->
      <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="quadMax.dataSource"/>  -------ref는 context-datasource 에 alias로 지정되있음
      </bean>
 1.3) 트랜잭션 매니저로 쓰기위해 만든 아이디 값을 넣어주고 <tx:attributes> 안에 트랜잭션해줄 method를 설정해준다.
      <tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="select*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="Exception" read-only="false"/>
			<tx:method name="get*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="Exception" read-only="false"/>
			<tx:method name="insert*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="Exception" read-only="false"/>
			<tx:method name="update*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="Exception" read-only="false"/>
			<tx:method name="delete*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="Exception" read-only="false"/>
			<tx:method name="execute*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="Exception" read-only="false"/>
			<tx:method name="save*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="Exception" read-only="false"/>
			<tx:method name="*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="Exception" read-only="false"/>
		             name = 트랜잭션이 적용될 메서드 이름을 명시.
                 isolation : 트랜잭션의 격리 레벨을 설정.
                 - READ_COMMITTED : 다른 트랜잭션에서 의해 커밋된 데이터를 읽을 수 있음.다른 트랜잭션이 커밋하지 않는 정보는 읽을 수 없다.
                 rollback-for : 트랜잭션을 롤백한 예외 타입을 설정.
                  - REQUIRED(default): 메서드를 수행하는데 트랜잭션이 필요하다는것을 의미. 현재 진행중인 트랜잭션이 존재하면,
                                        해당 트랜잭션을 사용하고 존재하지 않는다면 새로운 트랜잭션을 생성.
                 read-only : 읽기 전용 여부를 설정.
    </tx:attributes>
	</tx:advice>
2.어노테이션을 이용한 설정(JavaConfig방식으로 설정)(SSBI)
-DataBaseConfig.java 예시
	@Configuration
	@PropertySource("classpath:/jdbc-${spring.profiles.active}.properties") -------------->설정파일 불러오기
	@MapperScan(basePackages = {"com.ecs.**.dao.**"})

	public class DatabaseConfig {
		@Bean
		public PlatformTransactionManager dataSourceTransaction(DataSource dataSource) { --------------------->가장 중요~! PlatformTransactionManager를 만들어준다.
			return new DataSourceTransactionManager(dataSource); 
		}
	
	}
-makingserviceimpl.java 예시	

	@Transactional(value="dataSourceTransaction", propagation=Propagation.REQUIRED, rollbackFor=Exception.class)   ------> 트랜잭션 처리 할 메서드에 어노테이션 추가하면 끝!
	
3.AOP를 이용한 트랜잭션(SSBI)

	TransactionInterceptor : 
	
	@Bean
	public TransactionInterceptor transactionAdvice(PlatformTransactionManager txManager) {
		NameMatchTransactionAttributeSource txAttributeSource = new NameMatchTransactionAttributeSource(); --------> 등록된 이름으로 속성을 일치시킨다.
		
		RuleBasedTransactionAttribute txAttribute = new RuleBasedTransactionAttribute();----------> 만들어진 변수에 어떠한 상황에 어떻게 트랜잭션을 작동할지 정한다. 
		txAttribute.setRollbackRules(Collections.singletonList(new RollbackRuleAttribute(Exception.class)));------->1개의 객체만 있는 리스트를 반환
		txAttribute.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
		txAttribute.setReadOnly(false);
		
		HashMap<String, TransactionAttribute> txMethods = new HashMap<String, TransactionAttribute>();
		txMethods.put("select*", txAttribute);
		txMethods.put("get*", txAttribute);
		
		txMethods.put("insert*", txAttribute);
		txMethods.put("update*", txAttribute);
		txMethods.put("delete*", txAttribute);
		txMethods.put("save*", txAttribute);
		txAttributeSource.setNameMap(txMethods);

		return new TransactionInterceptor(txManager, txAttributeSource);
	}

	@Bean
	public Advisor transactionAdviceAdvisor() {
		AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut();
		pointcut.setExpression("within(@org.springframework.stereotype.Service *)");
		return new DefaultPointcutAdvisor(pointcut, transactionAdvice(dataSourceTransaction(dataSource())));
	}
